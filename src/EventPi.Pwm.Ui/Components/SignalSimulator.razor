@using System.Diagnostics
@using System.Transactions
@using EventPi.SignalProcessing
@inject SignalHubServer _srv
<h3>Signal Simulator</h3>
<label>@_lastValue</label>
<button @onclick="Start">Start</button>
<button @onclick="Stop">Stop</button>
@code {
    private float _sampling = 60; // 60Hz
    private float _uiRefreshRate = 2; // 2Hz
    private Timer _uiTimer;
    private PeriodicTimer _producerTimer;
    private float _lastValue;
    private Stopwatch sw;
    private ISignalSink<float> _sink;
    // Backing fields for A and W
    private float _a = 1;
    private float _w = 1;
    private CancellationTokenSource _cancellationTokenSource;
    private void Start()
    {
        sw = Stopwatch.StartNew();
        // Start UI refresh timer
        //_uiTimer = new Timer(RefreshUI, null, 0, (int)(1000 / _uiRefreshRate));
        // Start producer timer
        _cancellationTokenSource = new CancellationTokenSource();
        _producerTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(1000 / _sampling));
        _ = ProduceValuesAsync(_cancellationTokenSource.Token);
    }
    private void Stop()
    {
        // Dispose timers
        _uiTimer?.Dispose();
        _uiTimer = null;
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
        _cancellationTokenSource = null;
        sw?.Stop();
    }
    [Parameter]
    public float SamplingRate
    {
        get => _sampling;
        set => _sampling = value;
    }
    [Parameter]
    public float UiRefreshRate
    {
        get => _uiRefreshRate;
        set => _uiRefreshRate = value;
    }
    [Parameter]
    public string SignalName { get; set; }
    [Parameter]
    public float A
    {
        get => _a;
        set => _a = value;
    }
    [Parameter]
    public float W
    {
        get => _w;
        set => _w = value;
    }
    [Parameter]
    public Func<float, float> Function { get; set; } = MathF.Sin;
    private void RefreshUI(object state)
    {
        InvokeAsync(StateHasChanged);
    }
    protected override void OnParametersSet()
    {
        this._sink = _srv.GetSink<float>(SignalName);
    }
    private async Task ProduceValuesAsync(CancellationToken cancellationToken)
    {
        try
        {
            while (await _producerTimer.WaitForNextTickAsync(cancellationToken))
            {
                _lastValue = _a * Function(_w * (float)sw.Elapsed.TotalSeconds);
                _sink.Write(_lastValue);
            }
        }
        catch (OperationCanceledException)
        {
            // Handle cancellation
        }
    }
    public void Dispose()
    {
        // Dispose timers when the component is disposed
        Stop();
    }
}
