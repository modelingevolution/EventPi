@using EventPi.Services.Camera.Contract
@using Microsoft.AspNetCore.Http
@using ModelingEvolution.Observable.Blazor
@inject CameraManager Manager
@inject CameraControlVmRegister _profileRegister
@inject WeldingRecognitionVmRegister _vmRegister
<MudStack>
    <Observable Source="@_vm.SetWeldingRecognitionConfiguration">
    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Text="Testing panel" @bind-Expanded="@_isTestTurnedOn">
            <MudButton OnClick="OnSwitchToWeldingProfile"> Switch to Welding profile </MudButton>
            <MudButton OnClick="OnSwitchToDefaultProfile"> Switch to Default profile </MudButton>
        </MudExpansionPanel>
    </MudExpansionPanels>
    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Text="Auto switch mode" @bind-Expanded="@_isAutoSwitchExpanded">
            <MudSimpleTable Dense="true" Bordered="false">
                <tbody>
                <tr>
                    <td style="width: 150px"><MudSwitch @bind-Value="@_cmd.DetectionEnabled" Color="Color.Primary" Label="Try detect welding" /></td>
                </tr>
                <tr>
                    <td><MudNumericField Label="Bright Pixel Border:" @bind-Value="@_cmd.BrightPixelsBorder" For="() => _cmd.BrightPixelsBorder"></MudNumericField></td>
                    <td><MudSlider @bind-Value="_cmd.BrightPixelsBorder" Min="0" Max="255" Step="1" Color="Color.Info"></MudSlider></td>
                </tr>
                <tr>
                            <td><MudNumericField Label="Dark Pixel Border:" @bind-Value="@_cmd.DarkPixelsBorder" For="() => _cmd.DarkPixelsBorder"></MudNumericField></td>
                            <td><MudSlider @bind-Value="_cmd.DarkPixelsBorder" Min="0" Max="255" Step="1" Color="Color.Info"></MudSlider></td>
                </tr>
                <tr>
                            <td><MudNumericField Label="Bright Pixels border %:" @bind-Value="@_cmd.WeldingValue" For="() => _cmd.WeldingValue"></MudNumericField></td>
                            <td><MudSlider @bind-Value="_cmd.WeldingValue" Min="0" Max="100" Step="1" Color="Color.Info"></MudSlider></td>
                </tr>
                <tr>
                            <td><MudNumericField Label="Dark Pixels border %:" @bind-Value="@_cmd.NonWeldingValue" For="() => _cmd.NonWeldingValue"></MudNumericField></td>
                            <td><MudSlider @bind-Value="_cmd.NonWeldingValue" Min="0" Max="100" Step="1" Color="Color.Info"></MudSlider></td>
                </tr>
             
                </tbody>
            </MudSimpleTable>
            <MudButtonGroup Variant="Variant.Filled" Style="align-self:center" Size="Size.Large">
                <MudButton OnClick="@_vm.Save">Save</MudButton>
                <MudButton OnClick="@_vm.Cancel">Cancel</MudButton>
            </MudButtonGroup>
        </MudExpansionPanel>
    </MudExpansionPanels>
    </Observable>
</MudStack>

@code {

    [Parameter]
    public string HostName { get; set; }

    [Parameter]
    public int CameraNr { get; set; }

    private bool _isConnectedViaGrpcToRpiCam = false;

    private int _brightPixels;
    private int _darkPixels;
    private int _currentAppliedShutter;
    private bool _isWelding;
    private bool _adminMode;
    private bool _isTestTurnedOn;
    private bool _isAutoSwitchExpanded;
    SetWeldingRecognitionConfiguration _cmd;
    private WeldingRecognitionVm _vm;
    private CameraControlsVm _profileWeldingVm;
    private CameraControlsVm _profileNonWeldingVm;

    protected override async Task OnInitializedAsync()
    {
        _isConnectedViaGrpcToRpiCam = await Manager.GreetWithRpiCam();
        //   _grpcFrameService.OnFrameFeaturesAppeared += OnChangeFrameParams;

        _profileWeldingVm = _profileRegister.Get($"{HostName}/welding");
        _profileNonWeldingVm = _profileRegister.Get($"{HostName}/default");
        
    }
    protected override async Task OnParametersSetAsync()
    {
        _vm = _vmRegister.Get($"{HostName}/{CameraNr}");
        _cmd = _vm.SetWeldingRecognitionConfiguration;

        await _vm.Initialize(HostName, CameraNr);
    }

    private async Task OnSwitchToWeldingProfile()
    {
        var camParams = new SetCameraParameters();
        camParams.CopyFrom(_profileWeldingVm.SetCameraParameters);
        await Manager.ProcessAsync(camParams);
    }
    private async Task OnSwitchToDefaultProfile()
    {
        var camParams = new SetCameraParameters();
        camParams.CopyFrom(_profileNonWeldingVm.SetCameraParameters);
        await Manager.ProcessAsync(camParams);
    }
   
   

}