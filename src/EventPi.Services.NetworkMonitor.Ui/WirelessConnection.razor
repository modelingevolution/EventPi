@using EventPi.Abstractions
@using EventPi.Services.NetworkMonitor.Contract
@using MicroPlumberd
@inject VmHostRegister<WirelessConnectionVm> _cR
@inject VmHostRegister<WirelessStationsVm> _sR
@inject ICommandBus _bus
@if (_cVm != null)
{
    <Observable Source="_cVm">
        <MudExpansionPanels>
            <MudExpansionPanel @bind-IsExpanded="@IsListOpened" >
                <TitleContent>
                    <MudStack Row="true" >
                        @if (_cVm.Connectivity.State == DeviceStateChanged.Activated)
                        {
                            <MudIcon Icon="@SignalToIcon.Convert(_cVm.Connectivity.Signal)" />
                            <MudText>@_cVm.Connectivity.Ssid</MudText>
                        }
                        else
                        {
                            <MudText Style="font-weight:italic">@_cVm.Connectivity.State</MudText>
                        }
                    </MudStack>
                </TitleContent>
                <ChildContent>
                    <MudTextField Label="Ip configuration" T="string" ReadOnly="true" Text="@_cVm.Connectivity.IpConfig.ToString()"/>
                    <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary" Class="pt-8">
                        <MudButton>Disconnect</MudButton>
                    </MudButtonGroup>

                    <Observable Source="@_sVm" Context="vm">
                        <MudList Clickable="true">
                            @if (_sVm.Stations.Any(x => x.Ssid != _cVm?.Connectivity?.Ssid))
                            {
                                @foreach (var i in _sVm.Stations.Where(x => x.Ssid != _cVm?.Connectivity?.Ssid))
                                {
                                    <MudListItem Icon="@SignalToIcon.Convert(i.Signal)" OnClick="async () => { await _sVm.Connect(i); IsListOpened = false; }">@i.Ssid</MudListItem>
                                }
                            }
                            else
                            {
                                <div style="text-align:center">
                                    <MudProgressCircular Indeterminate="true" Style="margin-left:auto; margin-right:auto;"/>
                                </div>
                            }
                        </MudList>
                    </Observable>
                </ChildContent>
            </MudExpansionPanel>
            
        </MudExpansionPanels>
    </Observable>
}

@code
{
    private WirelessConnectionVm? _cVm;
    private WirelessStationsVm? _sVm;
    private bool _isListOpened;
    private DateTime? _lastScanRequest;
    public bool IsListOpened
    {
        get => _isListOpened;
        set
        {
            _isListOpened = value;
            if (!value) return;
            if (_lastScanRequest.HasValue && DateTime.Now.Subtract(_lastScanRequest.Value) <= TimeSpan.FromSeconds(45)) return;
            _lastScanRequest = DateTime.Now;
            Task.Run(() => _bus.SendAsync(HostName, new RequestWifiScan()));
        }
    }

    [Parameter]
    public HostName HostName { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        this._cVm = await _cR.Get(HostName).Initialize(HostName);
        this._sVm = await _sR.Get(HostName).Initialize(HostName);
    }

}