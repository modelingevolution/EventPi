@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography.X509Certificates
@using EventPi.Abstractions
@using EventPi.Services.NetworkMonitor.Contract
@using MicroPlumberd
@using Microsoft.JSInterop
@inject ICommandBus _bus
@inject IEnvironment _env
@inject IJSRuntime _js
<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column py-1" style="min-height:150px; max-width:280px; width:280px">
            <MudText>@Ssid requires password:</MudText>
            <MudFocusTrap>
                <MudTextField Required="true" OnKeyDown="OnKeyDown" Immediate="true" AutoGrow="false" id="tx-pwd"
                          @bind-Text="_pwd.Password" For="() => _pwd.Password" InputType="InputType.Password" Label="Password"/>
            </MudFocusTrap>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" OnClick="Close">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string Ssid { get; set; }

    [Parameter]
    public string? InterfaceName { get; set; }

    [Parameter]
    public string? ProfileFileName { get; set; }

    [Parameter]
    public HostName? HostName { get; set; }

    private DefineWirelessProfile _pwd = new();
    protected override void OnParametersSet()
    {
        _pwd = new();
        _pwd.Ssid = Ssid;
        _pwd.InterfaceName = InterfaceName;
        _pwd.FileName = ProfileFileName;
    }


    async Task Close()
    {
        try
        {
            await _bus.SendAsync(HostName ?? _env.HostName, _pwd);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch(ValidationException) {}
    }

    void Cancel() => MudDialog.Close(DialogResult.Cancel());


    private Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            return Close();
        }
        return Task.CompletedTask;
    }

}